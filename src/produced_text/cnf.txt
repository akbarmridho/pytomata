BREAK -> break 
CONST -> const 
CASE -> case 
CATCH -> catch 
CONTINUE -> continue 
DEFAULT -> default 
DELETE -> delete 
ELSE -> else 
FALSE -> false 
FINALLY -> finally 
FOR -> for 
FUNCTION -> function 
IF -> if 
ELIF -> elif 
LET -> let 
NULL -> null 
RETURN -> return 
SWITCH -> switch 
THROW -> throw 
WHILE -> while 
VAR -> var 
TRUE -> true 
TRY -> try 
VARIABLE -> variable 
CBRACKETL -> cbracketl 
CBRACKETR -> cbracketr 
RBRACKETL -> rbracketl 
RBRACKETR -> rbracketr 
SBRACKETL -> sbracketl 
SBRACKETR -> sbracketr 
NEWLINE -> nl 
SEMICOLON -> semicolon 
COLON -> colon 
AR_OPR -> plus 
AR_OPR -> minus 
AR_OPR -> divide 
AR_OPR -> multiply 
AR_OPR -> mod 
AR_OPR -> pow 
AR_OPR -> band 
AR_OPR -> bor 
AR_OPR -> shift 
AR_OPR -> xor 
CREMENT -> inc 
CREMENT -> dec 
COMMA -> comma 
QMARK -> qmark 
ASSIGN -> assign 
EQ_OPR -> greater 
EQ_OPR -> greatereq 
EQ_OPR -> lesseq 
EQ_OPR -> less 
EQ_OPR -> equal 
EQ_OPR -> nequal 
NOT -> not 
LOGIC_OPR -> and 
LOGIC_OPR -> or 
ASS_OPR -> minuseq 
ASS_OPR -> pluseq 
ASS_OPR -> divq 
ASS_OPR -> multiplyeq 
ASS_OPR -> poweq 
ASS_OPR -> modeq 
NUMBER -> number 
STRING -> string 
ASSIGNABLE0 -> RBRACKETL ASSIGNABLE 
ASSIGNABLE -> ASSIGNABLE0 RBRACKETR 
ASSIGNABLE -> ASSIGNABLE2 SBRACKETR 
ASSIGNABLE -> ASSIGNABLE3 ASSIGNABLE 
ASSIGNABLE -> null 
ASSIGNABLE -> number 
ASSIGNABLE -> NOT LOGIC_EXPR 
ASSIGNABLE -> NOT ASSIGNABLE 
ASSIGNABLE -> ASSIGNABLE4 RBRACKETR 
ASSIGNABLE -> ASSIGNABLE5 ASSIGNABLE 
ASSIGNABLE -> ASSIGNABLE6 LOGIC_EXPR 
ASSIGNABLE -> SBRACKETL SBRACKETR 
ASSIGNABLE -> ASSIGNABLE7 SBRACKETR 
ASSIGNABLE -> true 
ASSIGNABLE -> variable 
ASSIGNABLE -> false 
ASSIGNABLE -> string 
ASSIGNABLE1 -> VARIABLE SBRACKETL 
ASSIGNABLE2 -> ASSIGNABLE1 ASSIGNABLE 
ASSIGNABLE3 -> ASSIGNABLE ASS_OPR 
ASSIGNABLE4 -> RBRACKETL LOGIC_EXPR 
ASSIGNABLE5 -> ASSIGNABLE LOGIC_OPR 
ASSIGNABLE6 -> LOGIC_EXPR LOGIC_OPR 
ASSIGNABLE7 -> SBRACKETL ARR_ELS 
LOGIC_EXPR -> NOT LOGIC_EXPR 
LOGIC_EXPR -> NOT ASSIGNABLE 
LOGIC_EXPR -> ASSIGNABLE4 LBRACKETR 
LOGIC_EXPR -> ASSIGNABLE5 ASSIGNABLE 
LOGIC_EXPR -> ASSIGNABLE6 LOGIC_EXPR 
LOGIC_EXPR -> true 
LOGIC_EXPR -> false 
ARRAY -> SBRACKETL SBRACKETR 
ARRAY -> ASSIGNABLE7 SBRACKETSR 
ARR_ELS0 -> ARR_ELS COMMA 
ARR_ELS -> ARR_ELS0 ARR_ELS 
ARR_ELS -> ASSIGNABLE0 RBRACKETR 
ARR_ELS -> ASSIGNABLE2 SBRACKETR 
ARR_ELS -> ASSIGNABLE3 ASSIGNABLE 
ARR_ELS -> null 
ARR_ELS -> number 
ARR_ELS -> NOT LOGIC_EXPR 
ARR_ELS -> NOT ASSIGNABLE 
ARR_ELS -> ASSIGNABLE4 LBRACKETR 
ARR_ELS -> ASSIGNABLE5 ASSIGNABLE 
ARR_ELS -> ASSIGNABLE6 LOGIC_EXPR 
ARR_ELS -> SBRACKETL SBRACKETR 
ARR_ELS -> ASSIGNABLE7 SBRACKETSR 
ARR_ELS -> true 
ARR_ELS -> variable 
ARR_ELS -> false 
ARR_ELS -> string 
S -> NEWLINE S 
S -> S NEWLINE 
S -> BLOCKS S 
S -> nl 
SEMICOLONS -> SEMICOLON nl 
SEMICOLONS -> SEMICOLON SEMICOLONS 
SEMICOLONS -> semicolon 
BLOCKS -> BLOCK BLOCKS 
BLOCKS -> BLOCK SEMICOLONS 
BLOCKS -> SENTENCE SEMICOLONS 
BLOCKS -> BLOCKS4 RBRACKETL 
BLOCKS -> BLOCKS10 ELSE_BLOCK 
BLOCKS -> BLOCKS17 ELSE_BLOCK 
BLOCKS -> BLOCKS10 ELIF_BLOCKS 
BLOCKS -> BLOCKS28 RBRACKETL 
BLOCKS -> BLOCKS34 CBRACKETR 
BLOCKS -> BLOCKS33 CBRACKETR 
BLOCKS -> BLOCKS44 CBRACKETR 
BLOCKS -> BLOCKS32 CBRACKETR 
BLOCKS -> TRY_BLOCK FINALLY_BLOCK 
BLOCKS -> BLOCKS54 CBRACKETR 
BLOCKS -> TRY_BLOCK CATCH_BLOCK 
BLOCKS0 -> IF RBRACKETL 
BLOCKS1 -> BLOCKS0 LOGIC_EXPR 
BLOCKS2 -> BLOCKS1 RBRACKETR 
BLOCKS3 -> BLOCKS2 CBRACKETL 
BLOCKS4 -> BLOCKS3 BLOCKS 
BLOCKS10 -> BLOCKS4 RBRACKETL 
BLOCKS17 -> BLOCKS10 ELIF_BLOCKS 
BLOCKS24 -> WHILE RBRACKETL 
BLOCKS25 -> BLOCKS24 LOGIC_EXPR 
BLOCKS26 -> BLOCKS25 RBRACKETR 
BLOCKS27 -> BLOCKS26 CBRACKETL 
BLOCKS28 -> BLOCKS27 BLOCKS_LOOP 
BLOCKS29 -> SWITCH RBRACKETL 
BLOCKS30 -> BLOCKS29 VARIABLE 
BLOCKS31 -> BLOCKS30 RBRACKETR 
BLOCKS32 -> BLOCKS31 CBRACKETL 
BLOCKS33 -> BLOCKS32 CASES_BLOCK 
BLOCKS34 -> BLOCKS33 CASE_DEFAULT 
BLOCKS44 -> BLOCKS32 CASE_DEFAULT 
BLOCKS49 -> FUNCTION VARIABLE 
BLOCKS50 -> BLOCKS49 RBRACKETL 
BLOCKS51 -> BLOCKS50 PARAMS 
BLOCKS52 -> BLOCKS51 RBRACKETR 
BLOCKS53 -> BLOCKS52 CBRACKETL 
BLOCKS54 -> BLOCKS53 BLOCKS_FUNC 
BLOCK -> BLOCK SEMICOLONS 
BLOCK -> SENTENCE SEMICOLONS 
BLOCK -> BLOCKS4 RBRACKETL 
BLOCK -> BLOCKS10 ELSE_BLOCK 
BLOCK -> BLOCKS17 ELSE_BLOCK 
BLOCK -> BLOCKS10 ELIF_BLOCKS 
BLOCK -> BLOCKS28 RBRACKETL 
BLOCK -> BLOCKS34 CBRACKETR 
BLOCK -> BLOCKS33 CBRACKETR 
BLOCK -> BLOCKS44 CBRACKETR 
BLOCK -> BLOCKS32 CBRACKETR 
BLOCK -> TRY_BLOCK FINALLY_BLOCK 
BLOCK -> BLOCKS54 CBRACKETR 
BLOCK -> TRY_BLOCK CATCH_BLOCK 
SENTENCE -> VARIABLE INC 
SENTENCE -> VARIABLE DEC 
SENTENCE -> ASSIGNMENT_TERM VARIABLE 
SENTENCE -> SENTENCE1 ASSIGNABLE 
SENTENCE -> SENTENCE3 ASSIGNABLE 
SENTENCE -> SENTENCE5 RBRACKETR 
SENTENCE0 -> CONST VARIABLE 
SENTENCE1 -> SENTENCE0 ASSIGN 
SENTENCE2 -> ASSIGNMENT_TERM VARIABLE 
SENTENCE3 -> SENTENCE2 ASSIGN_OP 
SENTENCE4 -> VARIABLE RBRACKETL 
SENTENCE5 -> SENTENCE4 PARAMS_CALL 
ASSIGNMENT -> VARIABLE INC 
ASSIGNMENT -> VARIABLE DEC 
ASSIGNMENT -> ASSIGNMENT_TERM VARIABLE 
ASSIGNMENT -> SENTENCE1 ASSIGNABLE 
ASSIGNMENT -> SENTENCE3 ASSIGNABLE 
ASSIGNMENT_TERM -> let 
ASSIGNMENT_TERM -> var 
ASSIGN_OP -> assign 
ASSIGN_OP -> pluseq 
ASSIGN_OP -> divq 
ASSIGN_OP -> muleq 
ASSIGN_OP -> mineq 
LOGIC_OP -> and 
LOGIC_OP -> nequal 
LOGIC_OP -> wequal 
LOGIC_OP -> egreater 
LOGIC_OP -> lequal 
LOGIC_OP -> or 
LOGIC_OP -> greater 
LOGIC_OP -> sequal 
LOGIC_OP -> less 
ARITH_OP -> plus 
ARITH_OP -> divide 
ARITH_OP -> mod 
ARITH_OP -> mineq 
ARITH_OP -> divq 
ARITH_OP -> minus 
ARITH_OP -> pluseq 
ARITH_OP -> multiply 
ARITH_OP -> muleq 
IF_BLOCK -> BLOCKS4 RBRACKETL 
IF_BLOCK -> BLOCKS10 ELSE_BLOCK 
IF_BLOCK -> BLOCKS17 ELSE_BLOCK 
IF_BLOCK -> BLOCKS10 ELIF_BLOCKS 
ELSE_BLOCK0 -> ELSE CBRACKETL 
ELSE_BLOCK1 -> ELSE_BLOCK0 BLOCKS 
ELSE_BLOCK -> ELSE_BLOCK1 CBRACKETR 
ELIF_BLOCKS -> ELIF_BLOCK ELIF_BLOCKS 
ELIF_BLOCK0 -> ELIF CBRACKETL 
ELIF_BLOCK1 -> ELIF_BLOCK0 BLOCKS 
ELIF_BLOCK -> ELIF_BLOCK1 CBRACKETR 
CASE_BLOCK0 -> CASE ASSIGNABLE 
CASE_BLOCK1 -> CASE_BLOCK0 COLON 
CASE_BLOCK -> CASE_BLOCK1 BLOCKS 
CASE_BLOCK -> CASE_BLOCK5 SEMICOLON 
CASE_BLOCK5 -> CASE_BLOCK BREAK 
CASES_BLOCK -> CASES_BLOCK CASE_BLOCK 
CASE_DEFAULT0 -> DEFAULT COLON 
CASE_DEFAULT -> CASE_DEFAULT0 BLOCKS 
CASE_DEFAULT -> CASE_DEFAULT3 SEMICOLON 
CASE_DEFAULT3 -> CASE_DEFAULT BREAK 
SWITCH_BLOCK -> BLOCKS34 CBRACKETR 
SWITCH_BLOCK -> BLOCKS33 CBRACKETR 
SWITCH_BLOCK -> BLOCKS44 CBRACKETR 
SWITCH_BLOCK -> BLOCKS32 CBRACKETR 
LOOP_SENTENCE -> SENTENCE CONTINUE 
LOOP_SENTENCE -> SENTENCE BREAK 
LOOP_SENTENCE -> SENTENCE LOOP_SENTENCE 
LOOP_SENTENCE -> VARIABLE INC 
LOOP_SENTENCE -> VARIABLE DEC 
LOOP_SENTENCE -> ASSIGNMENT_TERM VARIABLE 
LOOP_SENTENCE -> SENTENCE1 ASSIGNABLE 
LOOP_SENTENCE -> SENTENCE3 ASSIGNABLE 
LOOP_SENTENCE -> SENTENCE5 RBRACKETR 
BLOCKS_LOOP -> BLOCK_LOOP BLOCKS_LOOP 
BLOCKS_LOOP -> BLOCK BLOCKS 
BLOCKS_LOOP -> BLOCK SEMICOLONS 
BLOCKS_LOOP -> SENTENCE SEMICOLONS 
BLOCKS_LOOP -> BLOCKS4 RBRACKETL 
BLOCKS_LOOP -> BLOCKS10 ELSE_BLOCK 
BLOCKS_LOOP -> BLOCKS17 ELSE_BLOCK 
BLOCKS_LOOP -> BLOCKS10 ELIF_BLOCKS 
BLOCKS_LOOP -> BLOCKS28 RBRACKETL 
BLOCKS_LOOP -> BLOCKS34 CBRACKETR 
BLOCKS_LOOP -> BLOCKS33 CBRACKETR 
BLOCKS_LOOP -> BLOCKS44 CBRACKETR 
BLOCKS_LOOP -> BLOCKS32 CBRACKETR 
BLOCKS_LOOP -> TRY_BLOCK FINALLY_BLOCK 
BLOCKS_LOOP -> BLOCKS54 CBRACKETR 
BLOCKS_LOOP -> TRY_BLOCK CATCH_BLOCK 
BLOCK_LOOP -> LOOP_SENTENCE SEMICOLONS 
BLOCK_LOOP -> BLOCK_LOOP SEMICOLONS 
BLOCK_LOOP -> BLOCK_LOOP4 RBRACKETL 
BLOCK_LOOP -> BLOCK_LOOP10 ELSE_BLOCK_LOOP 
BLOCK_LOOP -> BLOCK_LOOP17 ELSE_BLOCK_LOOP 
BLOCK_LOOP -> BLOCK_LOOP16 ELIF_BLOCKS_FUNC 
BLOCK_LOOP4 -> BLOCKS3 BLOCKS_LOOP 
BLOCK_LOOP10 -> BLOCK_LOOP4 RBRACKETL 
BLOCK_LOOP15 -> BLOCKS3 BLOCKS_FUNC 
BLOCK_LOOP16 -> BLOCK_LOOP15 RBRACKETL 
BLOCK_LOOP17 -> BLOCK_LOOP16 ELIF_BLOCKS 
IF_BLOCK_LOOP -> BLOCK_LOOP4 RBRACKETL 
IF_BLOCK_LOOP -> BLOCK_LOOP10 ELSE_BLOCK_LOOP 
IF_BLOCK_LOOP -> BLOCK_LOOP17 ELSE_BLOCK_LOOP 
IF_BLOCK_LOOP -> BLOCK_LOOP16 ELIF_BLOCKS_FUNC 
ELSE_BLOCK_LOOP1 -> ELSE_BLOCK0 BLOCKS_LOOP 
ELSE_BLOCK_LOOP -> ELSE_BLOCK_LOOP1 CBRACKETR 
ELIF_BLOCKS_LOOP -> ELIF_BLOCK_FUNC ELIF_BLOCKS_FUNC 
ELIF_BLOCK_LOOP1 -> ELIF_BLOCK0 BLOCKS_LOOP 
ELIF_BLOCK_LOOP -> ELIF_BLOCK_LOOP1 CBRACKETR 
WHILE_BLOCK -> BLOCKS28 RBRACKETL 
FOR_BLOCK0 -> FOR RBRACKETL 
FOR_BLOCK1 -> FOR_BLOCK0 VARIABLE 
FOR_BLOCK2 -> FOR_BLOCK1 ASSIGN 
FOR_BLOCK3 -> FOR_BLOCK2 ASSIGNABLE 
FOR_BLOCK4 -> FOR_BLOCK3 SEMICOLON 
FOR_BLOCK5 -> FOR_BLOCK4 LOGIC_EXPR 
FOR_BLOCK6 -> FOR_BLOCK5 SEMICOLON 
FOR_BLOCK7 -> FOR_BLOCK6 ASSIGNMENT 
FOR_BLOCK8 -> FOR_BLOCK7 RBRACKETR 
FOR_BLOCK9 -> FOR_BLOCK8 CBRACKETL 
FOR_BLOCK10 -> FOR_BLOCK9 BLOCKS_LOOP 
FOR_BLOCK -> FOR_BLOCK10 CBRACKETR 
PARAMS_CALL0 -> PARAMS_CALL COMMA 
PARAMS_CALL -> PARAMS_CALL0 PARAMS_CALL 
PARAMS_CALL -> ASSIGNABLE0 RBRACKETR 
PARAMS_CALL -> ASSIGNABLE2 SBRACKETR 
PARAMS_CALL -> ASSIGNABLE3 ASSIGNABLE 
PARAMS_CALL -> null 
PARAMS_CALL -> number 
PARAMS_CALL -> NOT LOGIC_EXPR 
PARAMS_CALL -> NOT ASSIGNABLE 
PARAMS_CALL -> ASSIGNABLE4 LBRACKETR 
PARAMS_CALL -> ASSIGNABLE5 ASSIGNABLE 
PARAMS_CALL -> ASSIGNABLE6 LOGIC_EXPR 
PARAMS_CALL -> SBRACKETL SBRACKETR 
PARAMS_CALL -> ASSIGNABLE7 SBRACKETSR 
PARAMS_CALL -> true 
PARAMS_CALL -> variable 
PARAMS_CALL -> false 
PARAMS_CALL -> string 
PARAMS0 -> PARAMS COMMA 
PARAMS -> PARAMS0 PARAMS 
PARAMS -> variable 
FUNCTION_CALL -> SENTENCE5 RBRACKETR 
FUNCTION_BLOCK -> BLOCKS54 CBRACKETR 
FUNC_SENTENCE -> SENTENCE FUNC_SENTENCE 
FUNC_SENTENCE -> RETURN ASSIGNABLE 
FUNC_SENTENCE -> FUNC_SENTENCE0 ASSIGNABLE 
FUNC_SENTENCE -> FUNC_SENTENCE1 SEMICOLONS 
FUNC_SENTENCE -> FUNC_SENTENCE2 ASSIGNABLE 
FUNC_SENTENCE -> VARIABLE INC 
FUNC_SENTENCE -> VARIABLE DEC 
FUNC_SENTENCE -> ASSIGNMENT_TERM VARIABLE 
FUNC_SENTENCE -> SENTENCE1 ASSIGNABLE 
FUNC_SENTENCE -> SENTENCE3 ASSIGNABLE 
FUNC_SENTENCE -> SENTENCE5 RBRACKETR 
FUNC_SENTENCE0 -> FUNC_SENTENCE RETURN 
FUNC_SENTENCE1 -> THROW ASSIGNABLE 
FUNC_SENTENCE2 -> FUNC_SENTENCE THROW 
BLOCKS_FUNC -> BLOCK_FUNC BLOCKS_FUNC 
BLOCK_FUNC -> FUNC_SENTENCE SEMICOLONS 
BLOCK_FUNC -> BLOCK_FUNC SEMICOLONS 
BLOCK_FUNC -> BLOCK_LOOP15 RBRACKETL 
BLOCK_FUNC -> BLOCK_LOOP16 ELSE_BLOCK_FUNC 
BLOCK_FUNC -> BLOCK_LOOP17 ELSE_BLOCK_FUNC 
BLOCK_FUNC -> BLOCK_LOOP16 ELIF_BLOCKS_FUNC 
BLOCK_FUNC -> BLOCK SEMICOLONS 
BLOCK_FUNC -> SENTENCE SEMICOLONS 
BLOCK_FUNC -> BLOCKS4 RBRACKETL 
BLOCK_FUNC -> BLOCKS10 ELSE_BLOCK 
BLOCK_FUNC -> BLOCKS17 ELSE_BLOCK 
BLOCK_FUNC -> BLOCKS10 ELIF_BLOCKS 
BLOCK_FUNC -> BLOCKS28 RBRACKETL 
BLOCK_FUNC -> BLOCKS34 CBRACKETR 
BLOCK_FUNC -> BLOCKS33 CBRACKETR 
BLOCK_FUNC -> BLOCKS44 CBRACKETR 
BLOCK_FUNC -> BLOCKS32 CBRACKETR 
BLOCK_FUNC -> TRY_BLOCK FINALLY_BLOCK 
BLOCK_FUNC -> BLOCKS54 CBRACKETR 
BLOCK_FUNC -> TRY_BLOCK CATCH_BLOCK 
IF_BLOCK_FUNC -> BLOCK_LOOP15 RBRACKETL 
IF_BLOCK_FUNC -> BLOCK_LOOP16 ELSE_BLOCK_FUNC 
IF_BLOCK_FUNC -> BLOCK_LOOP17 ELSE_BLOCK_FUNC 
IF_BLOCK_FUNC -> BLOCK_LOOP16 ELIF_BLOCKS_FUNC 
ELSE_BLOCK_FUNC1 -> ELSE_BLOCK0 BLOCKS_FUNC 
ELSE_BLOCK_FUNC -> ELSE_BLOCK_FUNC1 CBRACKETR 
ELIF_BLOCKS_FUNC -> ELIF_BLOCK_FUNC ELIF_BLOCKS_FUNC 
ELIF_BLOCK_FUNC1 -> ELIF_BLOCK0 BLOCKS_FUNC 
ELIF_BLOCK_FUNC -> ELIF_BLOCK_FUNC1 CBRACKETR 
ELSE_BLOCK_FUNC0 -> ELSE CBRACKETL 
ELSE_BLOCK_FUNC1 -> ELSE_BLOCK_FUNC0 BLOCKS_FUNC 
ELSE_BLOCK_FUNC -> ELSE_BLOCK_FUNC1 CBRACKETR 
TRYCATCH_BLOCK -> TRY_BLOCK CATCH_BLOCK 
TRYFINALLY_BLOCK -> TRY_BLOCK FINALLY_BLOCK 
TRYCATCHFINALLY_BLOCK0 -> TRY_BLOCK CATCH_BLOCK 
TRYCATCHFINALLY_BLOCK -> TRYCATCHFINALLY_BLOCK0 FINALLY_BLOCK 
TRY_BLOCK0 -> TRY CBRACKETL 
TRY_BLOCK1 -> TRY_BLOCK0 BLOCKS 
TRY_BLOCK -> TRY_BLOCK1 CBRACKETR 
TRY_BLOCK -> TRY_BLOCK SEMICOLONS 
CATCH_BLOCK0 -> CATCH CBRACKETL 
CATCH_BLOCK1 -> CATCH_BLOCK0 BLOCKS 
CATCH_BLOCK -> CATCH_BLOCK1 CBRACKETR 
CATCH_BLOCK -> CATCH_BLOCK SEMICOLONS 
FINALLY_BLOCK0 -> FINALLY CBRACKETL 
FINALLY_BLOCK1 -> FINALLY_BLOCK0 BLOCKS 
FINALLY_BLOCK -> FINALLY_BLOCK1 CBRACKETR 
FINALLY_BLOCK -> FINALLY_BLOCK SEMICOLONS 
