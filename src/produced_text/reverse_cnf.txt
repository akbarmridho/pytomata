break <- BREAK
break <- LOOP_SENTENCE
const <- CONST
case <- CASE
catch <- CATCH
continue <- LOOP_SENTENCE
continue <- CONTINUE
default <- DEFAULT
delete <- DELETE
else <- ELSE
false <- PARAMS_CALL
false <- FALSE
false <- LOGIC_EXPR
false <- ASSIGNABLE
false <- ARR_ELS
finally <- FINALLY
for <- FOR
function <- FUNCTION
if <- IF
elif <- ELIF
let <- LET
let <- ASSIGNMENT_TERM
null <- NULL
null <- PARAMS_CALL
null <- LOGIC_EXPR
null <- ASSIGNABLE
null <- ARR_ELS
return <- RETURN
switch <- SWITCH
throw <- THROW
while <- WHILE
var <- ASSIGNMENT_TERM
var <- VAR
true <- TRUE
true <- PARAMS_CALL
true <- LOGIC_EXPR
true <- ASSIGNABLE
true <- ARR_ELS
try <- TRY
dot <- DOT
variable <- VARIABLE
variable <- PARAMS_CALL
variable <- LOGIC_EXPR
variable <- PARAMS
variable <- ASSIGNABLE
variable <- ARR_ELS
VARIABLE0 VARIABLE <- VARIABLE
VARIABLE0 VARIABLE <- PARAMS_CALL
VARIABLE0 VARIABLE <- LOGIC_EXPR
VARIABLE0 VARIABLE <- PARAMS
VARIABLE0 VARIABLE <- ASSIGNABLE
VARIABLE0 VARIABLE <- ARR_ELS
VARIABLE DOT <- VARIABLE0
cbracketl <- CBRACKETL
cbracketr <- CBRACKETR
rbracketl <- RBRACKETL
rbracketr <- RBRACKETR
sbracketl <- SBRACKETL
sbracketr <- SBRACKETR
semicolon <- SEMICOLONS
semicolon <- SEMICOLON
colon <- COLON
plus <- AR_OPR
minus <- AR_OPR
divide <- AR_OPR
multiply <- AR_OPR
mod <- AR_OPR
pow <- AR_OPR
band <- AR_OPR
bor <- AR_OPR
shift <- AR_OPR
xor <- AR_OPR
inc <- CREMENT
dec <- CREMENT
comma <- COMMA
qmark <- QMARK
assign <- ASSIGN
greater <- LOGIC_OPR
greater <- EQ_OPR
greatereq <- LOGIC_OPR
greatereq <- EQ_OPR
lesseq <- LOGIC_OPR
lesseq <- EQ_OPR
less <- LOGIC_OPR
less <- EQ_OPR
equal <- LOGIC_OPR
equal <- EQ_OPR
nequal <- LOGIC_OPR
nequal <- EQ_OPR
not <- NOT
and <- LOGIC_OPR
or <- LOGIC_OPR
minuseq <- ASS_OPR
pluseq <- ASS_OPR
divideeq <- ASS_OPR
multiplyeq <- ASS_OPR
poweq <- ASS_OPR
modeq <- ASS_OPR
number <- PARAMS_CALL
number <- LOGIC_EXPR
number <- NUMBER
number <- ASSIGNABLE
number <- ARR_ELS
string <- PARAMS_CALL
string <- STRING
string <- LOGIC_EXPR
string <- ASSIGNABLE
string <- ARR_ELS
RBRACKETL ASSIGNABLE <- ASSIGNABLE0
ASSIGNABLE0 RBRACKETR <- LOGIC_EXPR
ASSIGNABLE0 RBRACKETR <- PARAMS_CALL
ASSIGNABLE0 RBRACKETR <- ASSIGNABLE
ASSIGNABLE0 RBRACKETR <- ARR_ELS
ASSIGNABLE2 SBRACKETR <- LOGIC_EXPR
ASSIGNABLE2 SBRACKETR <- PARAMS_CALL
ASSIGNABLE2 SBRACKETR <- ASSIGNABLE
ASSIGNABLE2 SBRACKETR <- ARR_ELS
ASSIGNABLE3 ASSIGNABLE <- LOGIC_EXPR
ASSIGNABLE3 ASSIGNABLE <- PARAMS_CALL
ASSIGNABLE3 ASSIGNABLE <- ASSIGNABLE
ASSIGNABLE3 ASSIGNABLE <- ARR_ELS
ASSIGNABLE4 ASSIGNABLE <- LOGIC_EXPR
ASSIGNABLE4 ASSIGNABLE <- PARAMS_CALL
ASSIGNABLE4 ASSIGNABLE <- ASSIGNABLE
ASSIGNABLE4 ASSIGNABLE <- ARR_ELS
NOT LOGIC_EXPR <- LOGIC_EXPR
NOT LOGIC_EXPR <- PARAMS_CALL
NOT LOGIC_EXPR <- ASSIGNABLE
NOT LOGIC_EXPR <- ARR_ELS
NOT ASSIGNABLE <- LOGIC_EXPR
NOT ASSIGNABLE <- PARAMS_CALL
NOT ASSIGNABLE <- ASSIGNABLE
NOT ASSIGNABLE <- ARR_ELS
ASSIGNABLE5 RBRACKETR <- LOGIC_EXPR
ASSIGNABLE5 RBRACKETR <- PARAMS_CALL
ASSIGNABLE5 RBRACKETR <- ASSIGNABLE
ASSIGNABLE5 RBRACKETR <- ARR_ELS
ASSIGNABLE6 ASSIGNABLE <- LOGIC_EXPR
ASSIGNABLE6 ASSIGNABLE <- PARAMS_CALL
ASSIGNABLE6 ASSIGNABLE <- ASSIGNABLE
ASSIGNABLE6 ASSIGNABLE <- ARR_ELS
ASSIGNABLE7 LOGIC_EXPR <- LOGIC_EXPR
ASSIGNABLE7 LOGIC_EXPR <- PARAMS_CALL
ASSIGNABLE7 LOGIC_EXPR <- ASSIGNABLE
ASSIGNABLE7 LOGIC_EXPR <- ARR_ELS
SBRACKETL SBRACKETR <- PARAMS_CALL
SBRACKETL SBRACKETR <- LOGIC_EXPR
SBRACKETL SBRACKETR <- ARRAY
SBRACKETL SBRACKETR <- ASSIGNABLE
SBRACKETL SBRACKETR <- ARR_ELS
ASSIGNABLE8 SBRACKETR <- PARAMS_CALL
ASSIGNABLE8 SBRACKETR <- LOGIC_EXPR
ASSIGNABLE8 SBRACKETR <- ARRAY
ASSIGNABLE8 SBRACKETR <- ASSIGNABLE
ASSIGNABLE8 SBRACKETR <- ARR_ELS
ASSIGNABLE10 RBRACKETR <- PARAMS_CALL
ASSIGNABLE10 RBRACKETR <- FUNCTION_CALL
ASSIGNABLE10 RBRACKETR <- LOGIC_EXPR
ASSIGNABLE10 RBRACKETR <- ASSIGNABLE
ASSIGNABLE10 RBRACKETR <- ARR_ELS
ASSIGNABLE9 RBRACKETR <- PARAMS_CALL
ASSIGNABLE9 RBRACKETR <- FUNCTION_CALL
ASSIGNABLE9 RBRACKETR <- LOGIC_EXPR
ASSIGNABLE9 RBRACKETR <- ASSIGNABLE
ASSIGNABLE9 RBRACKETR <- ARR_ELS
VARIABLE SBRACKETL <- ASSIGNABLE1
ASSIGNABLE1 ASSIGNABLE <- ASSIGNABLE2
ASSIGNABLE ASS_OPR <- ASSIGNABLE3
ASSIGNABLE AR_OPR <- ASSIGNABLE4
RBRACKETL LOGIC_EXPR <- ASSIGNABLE5
ASSIGNABLE LOGIC_OPR <- ASSIGNABLE6
LOGIC_EXPR LOGIC_OPR <- ASSIGNABLE7
SBRACKETL ARR_ELS <- ASSIGNABLE8
VARIABLE RBRACKETL <- ASSIGNABLE9
ASSIGNABLE9 PARAMS_CALL <- ASSIGNABLE10
ARR_ELS COMMA <- ARR_ELS0
ARR_ELS0 ARR_ELS <- ARR_ELS
BLOCKS S <- SS
BLOCKS S <- S
BLOCK BLOCKS <- BLOCKS
BLOCK BLOCKS <- LOOP_SENTENCE
BLOCK BLOCKS <- BLOCKS_LOOP
BLOCK BLOCKS <- BLOCKS_FUNC
BLOCK BLOCKS <- S
BLOCK BLOCKS <- BLOCKS_LOOP_FUNC
BLOCK BLOCKS <- BLOCK_LOOP
BLOCK BLOCKS <- BLOCK_LOOP_FUNC
BLOCK BLOCKS <- SS
BLOCK SEMICOLONS <- BLOCK_FUNC
BLOCK SEMICOLONS <- BLOCKS
BLOCK SEMICOLONS <- LOOP_SENTENCE
BLOCK SEMICOLONS <- BLOCKS_LOOP
BLOCK SEMICOLONS <- BLOCK
BLOCK SEMICOLONS <- BLOCKS_FUNC
BLOCK SEMICOLONS <- S
BLOCK SEMICOLONS <- BLOCKS_LOOP_FUNC
BLOCK SEMICOLONS <- BLOCK_LOOP
BLOCK SEMICOLONS <- BLOCK_LOOP_FUNC
BLOCK SEMICOLONS <- SS
S5 CBRACKETR <- BLOCK_FUNC
S5 CBRACKETR <- BLOCKS
S5 CBRACKETR <- LOOP_SENTENCE
S5 CBRACKETR <- FUNCTION_BLOCK
S5 CBRACKETR <- BLOCKS_LOOP
S5 CBRACKETR <- BLOCK
S5 CBRACKETR <- BLOCKS_FUNC
S5 CBRACKETR <- S
S5 CBRACKETR <- BLOCKS_LOOP_FUNC
S5 CBRACKETR <- BLOCK_LOOP
S5 CBRACKETR <- BLOCK_LOOP_FUNC
S5 CBRACKETR <- SS
S3 EMPTY_BLOCK <- BLOCK_FUNC
S3 EMPTY_BLOCK <- BLOCKS
S3 EMPTY_BLOCK <- LOOP_SENTENCE
S3 EMPTY_BLOCK <- FUNCTION_BLOCK
S3 EMPTY_BLOCK <- BLOCKS_LOOP
S3 EMPTY_BLOCK <- BLOCK
S3 EMPTY_BLOCK <- BLOCKS_FUNC
S3 EMPTY_BLOCK <- S
S3 EMPTY_BLOCK <- BLOCKS_LOOP_FUNC
S3 EMPTY_BLOCK <- BLOCK_LOOP
S3 EMPTY_BLOCK <- BLOCK_LOOP_FUNC
S3 EMPTY_BLOCK <- SS
S14 CBRACKETR <- BLOCK_FUNC
S14 CBRACKETR <- BLOCKS
S14 CBRACKETR <- LOOP_SENTENCE
S14 CBRACKETR <- FUNCTION_BLOCK
S14 CBRACKETR <- BLOCKS_LOOP
S14 CBRACKETR <- BLOCK
S14 CBRACKETR <- BLOCKS_FUNC
S14 CBRACKETR <- S
S14 CBRACKETR <- BLOCKS_LOOP_FUNC
S14 CBRACKETR <- BLOCK_LOOP
S14 CBRACKETR <- BLOCK_LOOP_FUNC
S14 CBRACKETR <- SS
S12 EMPTY_BLOCK <- BLOCK_FUNC
S12 EMPTY_BLOCK <- BLOCKS
S12 EMPTY_BLOCK <- LOOP_SENTENCE
S12 EMPTY_BLOCK <- FUNCTION_BLOCK
S12 EMPTY_BLOCK <- BLOCKS_LOOP
S12 EMPTY_BLOCK <- BLOCK
S12 EMPTY_BLOCK <- BLOCKS_FUNC
S12 EMPTY_BLOCK <- S
S12 EMPTY_BLOCK <- BLOCKS_LOOP_FUNC
S12 EMPTY_BLOCK <- BLOCK_LOOP
S12 EMPTY_BLOCK <- BLOCK_LOOP_FUNC
S12 EMPTY_BLOCK <- SS
S26 CBRACKETR <- BLOCK_FUNC
S26 CBRACKETR <- BLOCKS
S26 CBRACKETR <- FOR_BLOCK
S26 CBRACKETR <- LOOP_SENTENCE
S26 CBRACKETR <- BLOCKS_LOOP
S26 CBRACKETR <- BLOCK
S26 CBRACKETR <- BLOCKS_FUNC
S26 CBRACKETR <- S
S26 CBRACKETR <- BLOCKS_LOOP_FUNC
S26 CBRACKETR <- BLOCK_LOOP
S26 CBRACKETR <- BLOCK_LOOP_FUNC
S26 CBRACKETR <- SS
S24 EMPTY_BLOCK <- BLOCK_FUNC
S24 EMPTY_BLOCK <- BLOCKS
S24 EMPTY_BLOCK <- FOR_BLOCK
S24 EMPTY_BLOCK <- LOOP_SENTENCE
S24 EMPTY_BLOCK <- BLOCKS_LOOP
S24 EMPTY_BLOCK <- BLOCK
S24 EMPTY_BLOCK <- BLOCKS_FUNC
S24 EMPTY_BLOCK <- FOR_BLOCK_FUNC
S24 EMPTY_BLOCK <- S
S24 EMPTY_BLOCK <- BLOCKS_LOOP_FUNC
S24 EMPTY_BLOCK <- BLOCK_LOOP
S24 EMPTY_BLOCK <- BLOCK_LOOP_FUNC
S24 EMPTY_BLOCK <- SS
S39 CBRACKETR <- BLOCK_FUNC
S39 CBRACKETR <- BLOCKS
S39 CBRACKETR <- LOOP_SENTENCE
S39 CBRACKETR <- SWITCH_BLOCK
S39 CBRACKETR <- BLOCKS_LOOP
S39 CBRACKETR <- BLOCK
S39 CBRACKETR <- BLOCKS_FUNC
S39 CBRACKETR <- S
S39 CBRACKETR <- BLOCKS_LOOP_FUNC
S39 CBRACKETR <- BLOCK_LOOP
S39 CBRACKETR <- BLOCK_LOOP_FUNC
S39 CBRACKETR <- SS
S38 CBRACKETR <- BLOCK_FUNC
S38 CBRACKETR <- BLOCKS
S38 CBRACKETR <- LOOP_SENTENCE
S38 CBRACKETR <- SWITCH_BLOCK
S38 CBRACKETR <- BLOCKS_LOOP
S38 CBRACKETR <- BLOCK
S38 CBRACKETR <- BLOCKS_FUNC
S38 CBRACKETR <- S
S38 CBRACKETR <- BLOCKS_LOOP_FUNC
S38 CBRACKETR <- BLOCK_LOOP
S38 CBRACKETR <- BLOCK_LOOP_FUNC
S38 CBRACKETR <- SS
S49 CBRACKETR <- BLOCK_FUNC
S49 CBRACKETR <- BLOCKS
S49 CBRACKETR <- LOOP_SENTENCE
S49 CBRACKETR <- SWITCH_BLOCK
S49 CBRACKETR <- BLOCKS_LOOP
S49 CBRACKETR <- BLOCK
S49 CBRACKETR <- BLOCKS_FUNC
S49 CBRACKETR <- S
S49 CBRACKETR <- BLOCKS_LOOP_FUNC
S49 CBRACKETR <- BLOCK_LOOP
S49 CBRACKETR <- BLOCK_LOOP_FUNC
S49 CBRACKETR <- SS
S36 EMPTY_BLOCK <- BLOCK_FUNC
S36 EMPTY_BLOCK <- BLOCKS
S36 EMPTY_BLOCK <- LOOP_SENTENCE
S36 EMPTY_BLOCK <- SWITCH_BLOCK
S36 EMPTY_BLOCK <- BLOCKS_LOOP
S36 EMPTY_BLOCK <- BLOCK
S36 EMPTY_BLOCK <- BLOCKS_FUNC
S36 EMPTY_BLOCK <- S
S36 EMPTY_BLOCK <- BLOCKS_LOOP_FUNC
S36 EMPTY_BLOCK <- BLOCK_LOOP
S36 EMPTY_BLOCK <- BLOCK_LOOP_FUNC
S36 EMPTY_BLOCK <- SS
TRY_BLOCK CATCH_BLOCK <- BLOCK_FUNC
TRY_BLOCK CATCH_BLOCK <- TRYCATCH_BLOCK
TRY_BLOCK CATCH_BLOCK <- BLOCKS
TRY_BLOCK CATCH_BLOCK <- LOOP_SENTENCE
TRY_BLOCK CATCH_BLOCK <- BLOCKS_LOOP
TRY_BLOCK CATCH_BLOCK <- S53
TRY_BLOCK CATCH_BLOCK <- BLOCK
TRY_BLOCK CATCH_BLOCK <- BLOCKS_FUNC
TRY_BLOCK CATCH_BLOCK <- S
TRY_BLOCK CATCH_BLOCK <- BLOCKS_LOOP_FUNC
TRY_BLOCK CATCH_BLOCK <- BLOCK_LOOP
TRY_BLOCK CATCH_BLOCK <- BLOCK_LOOP_FUNC
TRY_BLOCK CATCH_BLOCK <- SS
S53 FINALLY_BLOCK <- BLOCK_FUNC
S53 FINALLY_BLOCK <- BLOCKS
S53 FINALLY_BLOCK <- LOOP_SENTENCE
S53 FINALLY_BLOCK <- BLOCKS_LOOP
S53 FINALLY_BLOCK <- TRYCATCHFINALLY_BLOCK
S53 FINALLY_BLOCK <- BLOCK
S53 FINALLY_BLOCK <- BLOCKS_FUNC
S53 FINALLY_BLOCK <- S
S53 FINALLY_BLOCK <- BLOCKS_LOOP_FUNC
S53 FINALLY_BLOCK <- BLOCK_LOOP
S53 FINALLY_BLOCK <- BLOCK_LOOP_FUNC
S53 FINALLY_BLOCK <- SS
S58 CBRACKETR <- S64
S58 CBRACKETR <- BLOCK_FUNC
S58 CBRACKETR <- BLOCKS
S58 CBRACKETR <- LOOP_SENTENCE
S58 CBRACKETR <- BLOCKS_LOOP
S58 CBRACKETR <- BLOCK
S58 CBRACKETR <- BLOCKS_FUNC
S58 CBRACKETR <- S
S58 CBRACKETR <- SS
S58 CBRACKETR <- BLOCKS_LOOP_FUNC
S58 CBRACKETR <- BLOCK_LOOP
S58 CBRACKETR <- BLOCK_LOOP_FUNC
S58 CBRACKETR <- IF_BLOCK
S64 ELSE_BLOCK <- BLOCK_FUNC
S64 ELSE_BLOCK <- BLOCKS
S64 ELSE_BLOCK <- LOOP_SENTENCE
S64 ELSE_BLOCK <- BLOCKS_LOOP
S64 ELSE_BLOCK <- BLOCK
S64 ELSE_BLOCK <- BLOCKS_FUNC
S64 ELSE_BLOCK <- S
S64 ELSE_BLOCK <- SS
S64 ELSE_BLOCK <- BLOCKS_LOOP_FUNC
S64 ELSE_BLOCK <- BLOCK_LOOP
S64 ELSE_BLOCK <- BLOCK_LOOP_FUNC
S64 ELSE_BLOCK <- IF_BLOCK
S71 ELSE_BLOCK <- BLOCK_FUNC
S71 ELSE_BLOCK <- BLOCKS
S71 ELSE_BLOCK <- LOOP_SENTENCE
S71 ELSE_BLOCK <- BLOCKS_LOOP
S71 ELSE_BLOCK <- BLOCK
S71 ELSE_BLOCK <- BLOCKS_FUNC
S71 ELSE_BLOCK <- S
S71 ELSE_BLOCK <- SS
S71 ELSE_BLOCK <- BLOCKS_LOOP_FUNC
S71 ELSE_BLOCK <- BLOCK_LOOP
S71 ELSE_BLOCK <- BLOCK_LOOP_FUNC
S71 ELSE_BLOCK <- IF_BLOCK
S64 ELIF_BLOCKS <- BLOCK_FUNC
S64 ELIF_BLOCKS <- S71
S64 ELIF_BLOCKS <- BLOCKS
S64 ELIF_BLOCKS <- LOOP_SENTENCE
S64 ELIF_BLOCKS <- BLOCKS_LOOP
S64 ELIF_BLOCKS <- BLOCK
S64 ELIF_BLOCKS <- BLOCKS_FUNC
S64 ELIF_BLOCKS <- S
S64 ELIF_BLOCKS <- SS
S64 ELIF_BLOCKS <- BLOCKS_LOOP_FUNC
S64 ELIF_BLOCKS <- BLOCK_LOOP
S64 ELIF_BLOCKS <- BLOCK_LOOP_FUNC
S64 ELIF_BLOCKS <- IF_BLOCK
S56 EMPTY_BLOCK <- BLOCK_FUNC
S56 EMPTY_BLOCK <- BLOCKS
S56 EMPTY_BLOCK <- LOOP_SENTENCE
S56 EMPTY_BLOCK <- BLOCKS_LOOP
S56 EMPTY_BLOCK <- BLOCK
S56 EMPTY_BLOCK <- BLOCKS_FUNC
S56 EMPTY_BLOCK <- S
S56 EMPTY_BLOCK <- SS
S56 EMPTY_BLOCK <- BLOCKS_LOOP_FUNC
S56 EMPTY_BLOCK <- BLOCK_LOOP
S56 EMPTY_BLOCK <- BLOCK_LOOP_FUNC
S56 EMPTY_BLOCK <- IF_BLOCK
ASSIGNMENT SEMICOLONS <- SENTENCE
ASSIGNMENT SEMICOLONS <- BLOCK_FUNC
ASSIGNMENT SEMICOLONS <- BLOCKS
ASSIGNMENT SEMICOLONS <- LOOP_SENTENCE
ASSIGNMENT SEMICOLONS <- FUNC_SENTENCE
ASSIGNMENT SEMICOLONS <- BLOCKS_LOOP
ASSIGNMENT SEMICOLONS <- BLOCK
ASSIGNMENT SEMICOLONS <- BLOCKS_FUNC
ASSIGNMENT SEMICOLONS <- S
ASSIGNMENT SEMICOLONS <- BLOCKS_LOOP_FUNC
ASSIGNMENT SEMICOLONS <- BLOCK_LOOP
ASSIGNMENT SEMICOLONS <- BLOCK_LOOP_FUNC
ASSIGNMENT SEMICOLONS <- SS
FUNCTION_CALL SEMICOLONS <- SENTENCE
FUNCTION_CALL SEMICOLONS <- BLOCK_FUNC
FUNCTION_CALL SEMICOLONS <- BLOCKS
FUNCTION_CALL SEMICOLONS <- LOOP_SENTENCE
FUNCTION_CALL SEMICOLONS <- FUNC_SENTENCE
FUNCTION_CALL SEMICOLONS <- BLOCKS_LOOP
FUNCTION_CALL SEMICOLONS <- BLOCK
FUNCTION_CALL SEMICOLONS <- BLOCKS_FUNC
FUNCTION_CALL SEMICOLONS <- S
FUNCTION_CALL SEMICOLONS <- BLOCKS_LOOP_FUNC
FUNCTION_CALL SEMICOLONS <- BLOCK_LOOP
FUNCTION_CALL SEMICOLONS <- BLOCK_LOOP_FUNC
FUNCTION_CALL SEMICOLONS <- SS
LOGIC_EXPR SEMICOLONS <- SENTENCE
LOGIC_EXPR SEMICOLONS <- BLOCK_FUNC
LOGIC_EXPR SEMICOLONS <- BLOCKS
LOGIC_EXPR SEMICOLONS <- LOOP_SENTENCE
LOGIC_EXPR SEMICOLONS <- FUNC_SENTENCE
LOGIC_EXPR SEMICOLONS <- BLOCKS_LOOP
LOGIC_EXPR SEMICOLONS <- BLOCK
LOGIC_EXPR SEMICOLONS <- BLOCKS_FUNC
LOGIC_EXPR SEMICOLONS <- S
LOGIC_EXPR SEMICOLONS <- BLOCKS_LOOP_FUNC
LOGIC_EXPR SEMICOLONS <- BLOCK_LOOP
LOGIC_EXPR SEMICOLONS <- BLOCK_LOOP_FUNC
LOGIC_EXPR SEMICOLONS <- SS
TRY_BLOCK FINALLY_BLOCK <- BLOCK_FUNC
TRY_BLOCK FINALLY_BLOCK <- BLOCKS
TRY_BLOCK FINALLY_BLOCK <- LOOP_SENTENCE
TRY_BLOCK FINALLY_BLOCK <- BLOCKS_LOOP
TRY_BLOCK FINALLY_BLOCK <- TRYFINALLY_BLOCK
TRY_BLOCK FINALLY_BLOCK <- BLOCK
TRY_BLOCK FINALLY_BLOCK <- BLOCKS_FUNC
TRY_BLOCK FINALLY_BLOCK <- S
TRY_BLOCK FINALLY_BLOCK <- BLOCKS_LOOP_FUNC
TRY_BLOCK FINALLY_BLOCK <- BLOCK_LOOP
TRY_BLOCK FINALLY_BLOCK <- BLOCK_LOOP_FUNC
TRY_BLOCK FINALLY_BLOCK <- SS
S85 CBRACKETR <- BLOCK_FUNC
S85 CBRACKETR <- BLOCKS
S85 CBRACKETR <- LOOP_SENTENCE
S85 CBRACKETR <- BLOCKS_LOOP
S85 CBRACKETR <- WHILE_BLOCK
S85 CBRACKETR <- BLOCK
S85 CBRACKETR <- BLOCKS_FUNC
S85 CBRACKETR <- S
S85 CBRACKETR <- BLOCKS_LOOP_FUNC
S85 CBRACKETR <- BLOCK_LOOP
S85 CBRACKETR <- BLOCK_LOOP_FUNC
S83 EMPTY_BLOCK <- BLOCK_FUNC
S83 EMPTY_BLOCK <- BLOCKS
S83 EMPTY_BLOCK <- LOOP_SENTENCE
S83 EMPTY_BLOCK <- BLOCKS_LOOP
S83 EMPTY_BLOCK <- WHILE_BLOCK
S83 EMPTY_BLOCK <- BLOCK
S83 EMPTY_BLOCK <- BLOCKS_FUNC
S83 EMPTY_BLOCK <- WHILE_BLOCK_FUNC
S83 EMPTY_BLOCK <- S
S83 EMPTY_BLOCK <- BLOCKS_LOOP_FUNC
S83 EMPTY_BLOCK <- BLOCK_LOOP
S83 EMPTY_BLOCK <- BLOCK_LOOP_FUNC
S90 RBRACKETR <- BLOCK_FUNC
S90 RBRACKETR <- THROW_BLOCK
S90 RBRACKETR <- BLOCKS
S90 RBRACKETR <- LOOP_SENTENCE
S90 RBRACKETR <- BLOCKS_LOOP
S90 RBRACKETR <- BLOCK
S90 RBRACKETR <- BLOCKS_FUNC
S90 RBRACKETR <- S
S90 RBRACKETR <- BLOCKS_LOOP_FUNC
S90 RBRACKETR <- BLOCK_LOOP
S90 RBRACKETR <- BLOCK_LOOP_FUNC
FUNCTION VARIABLE <- S0
S0 RBRACKETL <- S1
S1 PARAMS <- S2
S2 RBRACKETR <- S3
S3 CBRACKETL <- S4
S4 BLOCKS_FUNC <- S5
S1 RBRACKETR <- S12
S12 CBRACKETL <- S13
S13 BLOCKS_FUNC <- S14
FOR RBRACKETL <- S18
S18 ASSIGNMENT <- S19
S19 SEMICOLON <- S20
S20 LOGIC_EXPR <- S21
S21 SEMICOLON <- S22
S22 ASSIGNMENT <- S23
S23 RBRACKETR <- S24
S24 CBRACKETL <- S25
S25 BLOCKS_LOOP <- S26
SWITCH RBRACKETL <- S34
S34 VARIABLE <- S35
S35 RBRACKETR <- S36
S36 CBRACKETL <- S37
S37 CASES_BLOCK <- S38
S38 CASE_DEFAULT <- S39
S37 CASE_DEFAULT <- S49
IF RBRACKETL <- S54
S54 LOGIC_EXPR <- S55
S55 RBRACKETR <- S56
S56 CBRACKETL <- S57
S57 BLOCKS <- S58
WHILE RBRACKETL <- S81
S81 LOGIC_EXPR <- S82
S82 RBRACKETR <- S83
S83 CBRACKETL <- S84
S84 BLOCKS_LOOP <- S85
THROW RBRACKETL <- S89
S89 ASSIGNABLE <- S90
SEMICOLON SEMICOLONS <- SEMICOLONS
OBJ_VAL COMMA <- OBJ_VALS0
OBJ_VALS0 OBJ_VALS <- OBJ_VALS
OBJ_VALS1 ASSIGNABLE <- OBJ_VAL
OBJ_VALS1 ASSIGNABLE <- OBJ_VALS
VARIABLE COLON <- OBJ_VALS1
CBRACKETL OBJ_VALS <- OBJECT0
OBJECT0 CBRACKETR <- OBJECT
VARIABLE CREMENT <- ASSIGNMENT
ASSIGNMENT_TERM VARIABLE <- ASSIGNMENT2
ASSIGNMENT_TERM VARIABLE <- ASSIGNMENT
ASSIGNMENT1 ASSIGNABLE <- ASSIGNMENT
ASSIGNMENT3 ASSIGNABLE <- ASSIGNMENT
ASSIGNMENT4 ASSIGNABLE <- ASSIGNMENT
ASSIGNMENT5 ASSIGNABLE <- ASSIGNMENT
CONST VARIABLE <- ASSIGNMENT0
ASSIGNMENT0 ASSIGN <- ASSIGNMENT1
ASSIGNMENT2 ASSIGN <- ASSIGNMENT3
VARIABLE ASSIGN <- ASSIGNMENT4
VARIABLE ASS_OPR <- ASSIGNMENT5
CBRACKETL CBRACKETR <- EMPTY_BLOCK
ELSE CBRACKETL <- ELSE_BLOCK0
ELSE_BLOCK0 BLOCKS <- ELSE_BLOCK1
ELSE_BLOCK1 CBRACKETR <- ELSE_BLOCK
ELSE EMPTY_BLOCK <- ELSE_BLOCK
ELIF_BLOCK ELIF_BLOCKS <- ELIF_BLOCKS
ELIF_BLOCKS4 CBRACKETR <- ELIF_BLOCK
ELIF_BLOCKS4 CBRACKETR <- ELIF_BLOCKS
ELIF_BLOCKS2 EMPTY_BLOCK <- ELIF_BLOCK
ELIF_BLOCKS2 EMPTY_BLOCK <- ELIF_BLOCKS
ELIF RBRACKETL <- ELIF_BLOCKS0
ELIF_BLOCKS0 LOGIC_EXPR <- ELIF_BLOCKS1
ELIF_BLOCKS1 RBRACKETR <- ELIF_BLOCKS2
ELIF_BLOCKS2 CBRACKETL <- ELIF_BLOCKS3
ELIF_BLOCKS3 BLOCKS <- ELIF_BLOCKS4
CASE ASSIGNABLE <- CASE_BLOCK0
CASE_BLOCK0 COLON <- CASE_BLOCK1
CASE_BLOCK1 BLOCKS <- CASES_BLOCK
CASE_BLOCK1 BLOCKS <- CASE_BLOCK
CASE_BLOCK1 BLOCKS <- CASES_BLOCK4
CASE_BLOCK5 SEMICOLON <- CASE_BLOCK
CASE_BLOCK BREAK <- CASE_BLOCK5
CASES_BLOCK CASE_BLOCK <- CASES_BLOCK
CASES_BLOCK5 SEMICOLON <- CASES_BLOCK
CASES_BLOCK4 BREAK <- CASES_BLOCK5
DEFAULT COLON <- CASE_DEFAULT0
CASE_DEFAULT0 BLOCKS <- CASE_DEFAULT
CASE_DEFAULT3 SEMICOLON <- CASE_DEFAULT
CASE_DEFAULT BREAK <- CASE_DEFAULT3
BLOCKS_LOOP CONTINUE <- LOOP_SENTENCE
BLOCKS_LOOP BREAK <- LOOP_SENTENCE
BLOCK_LOOP BLOCKS_LOOP <- BLOCKS_LOOP
BLOCK_LOOP BLOCKS_LOOP <- LOOP_SENTENCE
BLOCK_LOOP BLOCKS_LOOP <- BLOCKS_LOOP_FUNC
BLOCK_LOOP BLOCKS_LOOP <- BLOCK_LOOP_FUNC
LOOP_SENTENCE SEMICOLONS <- LOOP_SENTENCE
LOOP_SENTENCE SEMICOLONS <- BLOCKS_LOOP
LOOP_SENTENCE SEMICOLONS <- BLOCKS_LOOP_FUNC
LOOP_SENTENCE SEMICOLONS <- BLOCK_LOOP
LOOP_SENTENCE SEMICOLONS <- BLOCK_LOOP_FUNC
BLOCK_LOOP SEMICOLONS <- LOOP_SENTENCE
BLOCK_LOOP SEMICOLONS <- BLOCKS_LOOP
BLOCK_LOOP SEMICOLONS <- BLOCKS_LOOP_FUNC
BLOCK_LOOP SEMICOLONS <- BLOCK_LOOP
BLOCK_LOOP SEMICOLONS <- BLOCK_LOOP_FUNC
LOOP_SENTENCE58 CBRACKETR <- IF_BLOCK_LOOP
LOOP_SENTENCE58 CBRACKETR <- LOOP_SENTENCE
LOOP_SENTENCE58 CBRACKETR <- BLOCKS_LOOP
LOOP_SENTENCE58 CBRACKETR <- LOOP_SENTENCE64
LOOP_SENTENCE58 CBRACKETR <- BLOCKS_LOOP_FUNC
LOOP_SENTENCE58 CBRACKETR <- BLOCK_LOOP
LOOP_SENTENCE58 CBRACKETR <- BLOCK_LOOP_FUNC
LOOP_SENTENCE64 ELSE_BLOCK_LOOP <- IF_BLOCK_LOOP
LOOP_SENTENCE64 ELSE_BLOCK_LOOP <- LOOP_SENTENCE
LOOP_SENTENCE64 ELSE_BLOCK_LOOP <- BLOCKS_LOOP
LOOP_SENTENCE64 ELSE_BLOCK_LOOP <- BLOCKS_LOOP_FUNC
LOOP_SENTENCE64 ELSE_BLOCK_LOOP <- BLOCK_LOOP
LOOP_SENTENCE64 ELSE_BLOCK_LOOP <- BLOCK_LOOP_FUNC
LOOP_SENTENCE71 ELSE_BLOCK_LOOP <- IF_BLOCK_LOOP
LOOP_SENTENCE71 ELSE_BLOCK_LOOP <- LOOP_SENTENCE
LOOP_SENTENCE71 ELSE_BLOCK_LOOP <- BLOCKS_LOOP
LOOP_SENTENCE71 ELSE_BLOCK_LOOP <- BLOCKS_LOOP_FUNC
LOOP_SENTENCE71 ELSE_BLOCK_LOOP <- BLOCK_LOOP
LOOP_SENTENCE71 ELSE_BLOCK_LOOP <- BLOCK_LOOP_FUNC
S57 BLOCKS_LOOP <- LOOP_SENTENCE58
LOOP_SENTENCE64 ELIF_BLOCKS <- LOOP_SENTENCE71
ELIF_BLOCK_LOOP ELIF_BLOCKS_LOOP <- ELIF_BLOCKS_LOOP
ELIF_BLOCKS_LOOP4 CBRACKETR <- ELIF_BLOCK_LOOP
ELIF_BLOCKS_LOOP4 CBRACKETR <- ELIF_BLOCKS_LOOP
ELIF_BLOCKS3 BLOCKS_LOOP <- ELIF_BLOCKS_LOOP4
ELSE_BLOCK0 BLOCKS_LOOP <- ELSE_BLOCK_LOOP1
ELSE_BLOCK_LOOP1 CBRACKETR <- ELSE_BLOCK_LOOP
PARAMS_CALL COMMA <- PARAMS_CALL0
PARAMS_CALL0 PARAMS_CALL <- PARAMS_CALL
PARAMS COMMA <- PARAMS0
PARAMS0 PARAMS <- PARAMS
SENTENCE FUNC_SENTENCE <- FUNC_SENTENCE
RETURN ASSIGNABLE <- FUNC_SENTENCE
FUNC_SENTENCE0 ASSIGNABLE <- FUNC_SENTENCE
FUNC_SENTENCE1 SEMICOLONS <- FUNC_SENTENCE
FUNC_SENTENCE2 ASSIGNABLE <- FUNC_SENTENCE
FUNC_SENTENCE RETURN <- FUNC_SENTENCE0
THROW ASSIGNABLE <- FUNC_SENTENCE1
FUNC_SENTENCE THROW <- FUNC_SENTENCE2
BLOCK_FUNC BLOCKS_FUNC <- BLOCKS_LOOP_FUNC
BLOCK_FUNC BLOCKS_FUNC <- BLOCK_LOOP_FUNC
BLOCK_FUNC BLOCKS_FUNC <- BLOCKS_FUNC
FUNC_SENTENCE SEMICOLONS <- BLOCKS_LOOP_FUNC
FUNC_SENTENCE SEMICOLONS <- BLOCK_LOOP_FUNC
FUNC_SENTENCE SEMICOLONS <- BLOCKS_FUNC
FUNC_SENTENCE SEMICOLONS <- BLOCK_FUNC
BLOCK_FUNC SEMICOLONS <- BLOCKS_LOOP_FUNC
BLOCK_FUNC SEMICOLONS <- BLOCK_LOOP_FUNC
BLOCK_FUNC SEMICOLONS <- BLOCKS_FUNC
BLOCK_FUNC SEMICOLONS <- BLOCK_FUNC
BLOCKS_FUNC93 CBRACKETR <- BLOCK_FUNC
BLOCKS_FUNC93 CBRACKETR <- BLOCKS_FUNC99
BLOCKS_FUNC93 CBRACKETR <- BLOCKS_FUNC
BLOCKS_FUNC93 CBRACKETR <- BLOCKS_LOOP_FUNC
BLOCKS_FUNC93 CBRACKETR <- BLOCK_LOOP_FUNC
BLOCKS_FUNC93 CBRACKETR <- IF_BLOCK_FUNC
BLOCKS_FUNC99 ELSE_BLOCK_FUNC <- BLOCK_FUNC
BLOCKS_FUNC99 ELSE_BLOCK_FUNC <- BLOCKS_FUNC
BLOCKS_FUNC99 ELSE_BLOCK_FUNC <- BLOCKS_LOOP_FUNC
BLOCKS_FUNC99 ELSE_BLOCK_FUNC <- BLOCK_LOOP_FUNC
BLOCKS_FUNC99 ELSE_BLOCK_FUNC <- IF_BLOCK_FUNC
BLOCKS_FUNC106 ELSE_BLOCK_FUNC <- BLOCK_FUNC
BLOCKS_FUNC106 ELSE_BLOCK_FUNC <- BLOCKS_FUNC
BLOCKS_FUNC106 ELSE_BLOCK_FUNC <- BLOCKS_LOOP_FUNC
BLOCKS_FUNC106 ELSE_BLOCK_FUNC <- BLOCK_LOOP_FUNC
BLOCKS_FUNC106 ELSE_BLOCK_FUNC <- IF_BLOCK_FUNC
BLOCKS_FUNC99 ELIF_BLOCKS_FUNC <- BLOCK_FUNC
BLOCKS_FUNC99 ELIF_BLOCKS_FUNC <- BLOCKS_FUNC106
BLOCKS_FUNC99 ELIF_BLOCKS_FUNC <- BLOCKS_FUNC
BLOCKS_FUNC99 ELIF_BLOCKS_FUNC <- BLOCKS_LOOP_FUNC
BLOCKS_FUNC99 ELIF_BLOCKS_FUNC <- BLOCK_LOOP_FUNC
BLOCKS_FUNC99 ELIF_BLOCKS_FUNC <- IF_BLOCK_FUNC
BLOCKS_FUNC214 CBRACKETR <- BLOCK_FUNC
BLOCKS_FUNC214 CBRACKETR <- FOR_BLOCK_FUNC
BLOCKS_FUNC214 CBRACKETR <- BLOCKS_FUNC
BLOCKS_FUNC214 CBRACKETR <- BLOCKS_LOOP_FUNC
BLOCKS_FUNC214 CBRACKETR <- BLOCK_LOOP_FUNC
S57 BLOCKS_FUNC <- BLOCKS_FUNC93
S25 BLOCKS_LOOP_FUNC <- BLOCKS_FUNC214
ELIF_BLOCK_FUNC ELIF_BLOCKS_FUNC <- ELIF_BLOCKS_FUNC
ELIF_BLOCKS_FUNC4 CBRACKETR <- ELIF_BLOCK_FUNC
ELIF_BLOCKS_FUNC4 CBRACKETR <- ELIF_BLOCKS_FUNC
ELIF_BLOCKS3 BLOCKS_FUNC <- ELIF_BLOCKS_FUNC4
ELSE_BLOCK0 BLOCKS_FUNC <- ELSE_BLOCK_FUNC1
ELSE_BLOCK_FUNC1 CBRACKETR <- ELSE_BLOCK_FUNC
BLOCK_LOOP_FUNC BLOCKS_LOOP_FUNC <- BLOCKS_LOOP_FUNC
S84 BLOCKS_LOOP_FUNC <- WHILE_BLOCK_FUNC4
WHILE_BLOCK_FUNC4 CBRACKETR <- WHILE_BLOCK_FUNC
TRY CBRACKETL <- TRY_BLOCK0
TRY_BLOCK0 BLOCKS <- TRY_BLOCK1
TRY_BLOCK1 CBRACKETR <- TRY_BLOCK
TRY EMPTY_BLOCK <- TRY_BLOCK
TRY_BLOCK SEMICOLONS <- TRY_BLOCK
CATCH CBRACKETL <- CATCH_BLOCK0
CATCH_BLOCK0 BLOCKS <- CATCH_BLOCK1
CATCH_BLOCK1 CBRACKETR <- CATCH_BLOCK
CATCH EMPTY_BLOCK <- CATCH_BLOCK
CATCH_BLOCK6 CBRACKETR <- CATCH_BLOCK
CATCH_BLOCK SEMICOLONS <- CATCH_BLOCK
CATCH RBRACKETL <- CATCH_BLOCK2
CATCH_BLOCK2 VARIABLE <- CATCH_BLOCK3
CATCH_BLOCK3 RBRACKETR <- CATCH_BLOCK4
CATCH_BLOCK4 CBRACKETL <- CATCH_BLOCK5
CATCH_BLOCK5 BLOCKS <- CATCH_BLOCK6
FINALLY CBRACKETL <- FINALLY_BLOCK0
FINALLY_BLOCK0 BLOCKS <- FINALLY_BLOCK1
FINALLY_BLOCK1 CBRACKETR <- FINALLY_BLOCK
FINALLY EMPTY_BLOCK <- FINALLY_BLOCK
FINALLY_BLOCK SEMICOLONS <- FINALLY_BLOCK
WHILE_BLOCK <- SS
THROW_BLOCK <- SS
